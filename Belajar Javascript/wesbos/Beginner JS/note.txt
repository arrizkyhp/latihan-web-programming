===============================================
- to disable esLint use  /*  eslint-disable */
- cek tipe data = typeof()
- ->(Skinny arrow) =>(fat arrow)
===============================================
😊 Variables
    🥊  Check 1_variables.html

    🧿 Variables Scoped
        - Function Scoped
            - var first = 'ariz'; // variable decralataion statement
            - console.log(first); // function call statement
        - Block scoped
            - let age = 300;
            - const cool = true;

    🧿 Naming Variables
        - dont capital at the start
        - Camel Case = const iLovePizza = true;
        - Snake Case = const this_is_snake_case =  'cool';

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
😊 Types
    🥊  Check 2_types.html & types.js

    SNOB'N'US
    - String = "..." | '...' | `....`
    - Number = 10 | 100 | -100 | NaN | Infinity
  ╷-- Object
  │ - Boolean = true/false
  │ - Null = nothing | something that has a value of nothing
  │ - Undefined = nothing | something that has no value set to it
  │ - Symbol
  │
  ╵--> Object

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
😊 Function
    🥊  Check 3_function.html, function.js & declare-function.js

- function are declared and called
- function are group of statement
- function Category:
    🧿 Built in function
        - alert();
        - confirm();
        - form();
        - prompt();
        - console.log();
        - etc

    🧿 User defined functions
        user-generated functions:
        - thisIsaFunction();
        - totalCalculate();
        - citizenName();
        -etc

- function anatomy
    //keyword   //Name    //Parameters
        ☝          ☝           ☝
  📝function billCalculate(jumlahPesanan, harga) {
        //function body
        const total = jumlahPesanan * harga;
        // return statement
        return total;
        }

    //Function Call or Run
      //Name    //Arguments
        ☝          ☝
  📝billCalculate(3, 10000);

    or

    //variable to capture returned value
         ☝
  📝const totalBayar = billCalculate(3, 10000);


  🎃 Declare Functions
    🧧 see declare-function.js for detail

        🧿 Function Declaration
            - function with name
            - this function are hoisting
            - Hoisting is JavaScript's default behavior of moving declarations to the top.

            📝function doctorize(firstName) {}

        🧿 Anonymous Function
            - function without name

            📝function (firstName) {}
        🧿 Function Expression
            - store a function as value in variable
            - not hoisting means need to place at the top

            📝const doctorize = function (firstname) {}

        🧿 Arrow Function
            - shorter / one liner
            - no return & no bracket
            - anonymous function
            - if theres only 1 parameter you can delete ()

            📝const doctorize = (firstname) => `Dr. ${firstname}`;

        🧿 IIFE
            Immediatly ̶I̶n̶v̶o̶k̶e̶d Run Function Expression

            📝(function (age) {  return `YOu are COol and ${age}`; })(10);

        🧿 Methods
            Simply a function that lived inside an object
            - ex: console.log() = console is object, .log is function.

            📝const ariz ={                       -╷
                    name: 'Arrizky',                │
                 ╷- sayHi: function(){              │
    Function <---│       console.log('Hay Ariz');   │---> Objects
                 │       return 'Hay Ariz';         │
                 ╵-     },                          │
                };                                 -╵


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
😊 Debugging Tools
        🧿 Console Methods
            - console.error();
            - console.warn();
            - console.table(); <-- Cool
            - console.count();
            - console.group(); console.groupCollapsed(); console.groupEnd();
        🧿 Grabbing Elements
            - $0
            - $('')
            - $$
        🧿 Breakpoints
            - debugger;
        🧿 Scope
        🧿 Network Requests

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
😊 Scope
    🥊  Check scope.html & scope.js

        🧿 Global Scope
            - Variables declared Globally (outside any function).
            - Global variables can be accessed from anywhere in a JavaScript program.

            📝 var x = 2; | const x = 2;

        🧿 Function Scope
            - Variables & functions defined inside a function are not accessible (visible) from outside the function.

            📝 function functionName() {
                const nama = 'ariz';  // Function Scope
            }

        🧿 Block Scope
            - Variables declared inside a { } block cannot be accessed from outside the block:
            - let and const provide Block Scope
            - only var that not Block Scope

            📝 { let x = 2; } // x can Not be used here

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
😊 Hoisting
    🥊  Check hoisting.html & hoisting.js

    - Allow you to access function and variable before they have been created.
    - Hoisting is JavaScript's default behavior of moving declarations to the top.
    - Only declarations are hoisted.

        🧿 Function Declaration
        🧿 Variable Declaration

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
😊 Closures
    🥊  Check hoisting.html & hoisting.js

    - The ability to access a parent level scope from
      a child scope even after parent function has been terminated
    - a closure gives you access to an outer function’s scope from an inner function.

        🧧 check https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures?retiredLocale=id

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
😊 Events

    "this" on addEventListener only work on function not arrow =>